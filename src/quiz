#!/usr/bin/env python
import argparse
import csv
import os
import glob
import random
import re

def parse_arguments():
    """Read arguments from the command line"""
    parser = argparse.ArgumentParser(
            description='Take a quiz from .csv files',
            epilog='AUTHOR: George N. Morales Jr.')

    parser.add_argument(
            '-r', '--recursive', 
            action='store_true',
            help='search for .csv files recursively if directory is provided')
    parser.add_argument(
            '-s', '--shuffle', 
            action='store_true',
            help='shuffle questions')
    parser.add_argument(
            '-c', '--cheat', 
            type=int,
            default=0,
            choices=[0,1,2],
            help='include a cheat while taking the quiz.')
    parser.add_argument(
            'paths',
            nargs='+',
            metavar='FILENAME/DIRECTORY',
            help='Path to .csv file, if directory is provided will read all .csv files in that directory and combine them.'
            )
    return parser.parse_args()

def parse_file(path):
    with open(path, 'r') as f:
        lines = csv.reader(f.readlines())
    return lines
    
def find_csv(directory, recurse:bool):
    # references:https://www.geeksforgeeks.org/python-list-files-in-a-directory/
    return [f for f in glob.iglob(directory + '**', recursive=recurse) 
            if f.endswith('.csv')]

def consolidate_data(data, path:str):
    for i, (q, a, kw, mm) in enumerate(parse_file(path)):
        if i == 0:
            continue
        data["questions"].append(q)
        data["answers"].append(a)
        data["keywords"].append(kw.lower().split())
        data["minmatch"].append(int(mm))
    return data
def shuffle_data(data:dict):
    shuffled = list(
        zip(data["questions"], data["answers"], 
            data["keywords"], data["minmatch"]))
    random.shuffle(shuffled)
    q, a, kw, mm = zip(*shuffled)
    data["questions"], data["answers"] = list(q), list(a)
    data["keywords"], data["minmatch"] = list(kw), list(mm)
    
    return data

def quiz(data:dict, cheat:int):
    print("======================= Quiz Start! =======================")
    answers = []
    for i, question in enumerate(data["questions"]):
        print(f"Question {i+1} of {len(data['questions'])}:\n\t{question}\n")
        if cheat == 2:
            print(f"Answer: {data['answers'][i]}\n")
            print(f"Keywords: {data['keywords'][i]}\n")
        elif cheat == 1:
            print(f"Answer: {data['answers'][i]}\n")
        ans = ""
        while (not ans):
            ans = input("Answer: \n").lower().strip()
            print("\n")
        answers.append(ans)
    return answers

def validate_answers(answers:list, keywords:list, minmatch:list):
    marks = []
    for answer, kw, mm in zip(answers, keywords, minmatch):
        count = sum([
            word in kw
            for word in set(clean_text(answer).lower().split())
        ])

        # consider correct if kw count is gte minmatch
        marks.append(count >= mm)
        
    return marks, sum(marks)

def clean_text(text:str):
    return re.sub(r'[\.,\'=\*]', '', text)

def review_answers(questions:list, answers:list, marks:list):
    """
    Display questions and user answers along with remarks(correct or wrong).
    """

    print("======================= Quiz Review =======================")
    for q, a, mark in zip(questions, answers, marks):
        print(f"Question: \n\t{q}")
        print(f"Answer: ({'Correct' if mark else 'Wrong'})")
        print(f"\t{a}\n")

def clear():
    if os.name == 'nt':
        _ = os.system('cls')
    else:
        _ = os.system('clear')

def show_result(score:int, items:int):
    print("======================= Result =======================")
    print(f"You got {score} out of {items}")

def main():
    # get the files
    args = parse_arguments()
    data = {
            "questions": [],
            "answers": [],
            "keywords": [],
            "minmatch": []
            }

    for path in args.paths:
        # check if directory is provided
        if os.path.isdir(path):
            csvs = find_csv(path, args.recursive)
            for csv in csvs:
                data = consolidate_data(data, csv)
        else:
            data = consolidate_data(data, path)

    if args.shuffle:
        data = shuffle_data(data)

    # ask the questions
    while (True):
        answers = quiz(data, args.cheat)
        marks, score = validate_answers(
                answers, 
                data['keywords'], 
                data['minmatch'])

    # show result
        show_result(score, len(data['questions']))

    # review?
        review = input("Do you want to review your answers? [Y/n]: ").strip()
        if not review or review in ['Y', 'y']:
           review_answers(data['questions'], answers, marks)

    # again? 
        again = input("Do you want to take the quiz again? [y/N]: ").strip()
        if again in ['y', 'Y']:
            # clear screen
            clear()
        else:
            break

if __name__ == '__main__':
    main()

